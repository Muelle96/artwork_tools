name: CI/CD

on:
  push:
    branches:
      - pipeline
      - dev
      - staging
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - "*"

permissions:
  contents: read

jobs:
  phpcs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # important!
      - name: Install PHP and Composer
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: gd zip bcmath pcntl
      - name: Install Dependencies
        run: composer install --no-progress --no-suggest --no-interaction
      - name: Sniff
        uses: tinovyatkin/action-php-codesniffer@v1
        with:
          files: "**.php"
          phpcs_path: php vendor/bin/phpcs
          standard: phpcs.xml

  phpstan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Composer Setup
        uses: php-actions/composer@v6
        with:
          php_version: 8.2
          php_extensions: gd zip bcmath pcntl
      - name: PHPStan Static Analysis
        uses: php-actions/phpstan@v3
        with:
          configuration: phpstan.neon.dist
          memory_limit: 1G

  tests:
    name: PHP Version ${{ matrix.php }} - Laravel Version ${{ matrix.laravel }} - ${{ matrix.dependency-version }}
    needs: [phpcs, phpstan]
    runs-on: ${{ matrix.operating-systems }}
    timeout-minutes: 15
    env:
      COMPOSER_NO_INTERACTION: 1
      XDEBUG_MODE: coverage
    strategy:
      matrix:
        php: [ 8.2]
        laravel: [ ^10 ]
        dependency-version: [ prefer-stable ]
        exclude:
          - php: 8.0
        operating-systems: [ubuntu-latest]
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: artwork_tools
        ports:
          - 3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=5
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: curl, fileinfo, gd, intl, mbstring, openssl, pdo, pdo_mysql, tokenizer, zip, xdebug, pcntl
      - name: Composer Install
        run: composer install
      - name: Set Testing Environment
        run: |
          cp .env.example .env.testing
          sed -i "s|^\(APP_ENV=\s*\).*$|\1testing|" .env.testing
          sed -i "s|^\(DB_HOST=\s*\).*$|\1127.0.0.1|" .env.testing
          sed -i "s|^\(DB_PORT=\s*\).*$|\1${{ job.services.mysql.ports['3306'] }}|" .env.testing
          sed -i "s|^\(DB_DATABASE=\s*\).*$|\1artwork_tools|" .env.testing
          sed -i "s|^\(DB_USERNAME=\s*\).*$|\1root|" .env.testing
          sed -i "s|^\(DB_PASSWORD=\s*\).*$|\1root|" .env.testing
      - name: Setup Application
        run: |
          php artisan key:generate --env=testing
          php artisan optimize --env=testing
          php artisan migrate:fresh --env=testing
          php artisan db:seed --class=ProductionDatabaseSeeder --env=testing
      - name: Running Test
        run: vendor/bin/pest --colors=always --coverage --min=20

  push_to_registry:
    name: Push Docker image to Docker Hub
    needs: [tests]
    if:  github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' || startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Get tag name
        uses: olegtarasov/get-tag@v2.1.3
        id: tagName
        with:
          tagRegex: "v*"
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: muelle96/artwork
      - name: Build and push Docker image
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          build-args: |
            TAG=${{ steps.tagName.outputs.tag }}
            BRANCH=${{ github.head_ref || github.ref_name }}
          context: .
          file: dockerfiles/release.Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
